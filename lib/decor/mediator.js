// Generated by CoffeeScript 1.6.2
(function() {
  var Mediator, bindable, comerr, step, type,
    __slice = [].slice;

  comerr = require("comerr");

  type = require("type-component");

  step = require("../utils/step");

  bindable = require("bindable");

  Mediator = (function() {
    /*
    */
    function Mediator(_funwrap) {
      this._funwrap = _funwrap;
      this._listeners = {};
    }

    /*
    */


    Mediator.prototype.on = function() {
      var callback, callbacks, command, commandInfo, listener, method, name, _ref;

      command = arguments[0], callbacks = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      commandInfo = command.split(" ");
      name = commandInfo.pop();
      method = commandInfo.shift();
      callback = (_ref = this._funwrap).decorate.apply(_ref, callbacks);
      if (!(listener = this._listeners[name])) {
        listener = this._listeners[name] = {
          pre: [],
          post: []
        };
      }
      if (method === "pre") {
        return listener.pre.push(callback);
      } else if (method === "post") {
        return listener.post.push(callback);
      } else {
        return listener.callback = callback;
      }
    };

    /*
    */


    Mediator.prototype.execute = function(command, context, options, next) {
      var args, callbacks, listener, onComplete, request;

      args = Array.prototype.slice.call(arguments, 0);
      command = args.shift();
      context = args.length === 3 ? args.shift() : {};
      next = args.length === 2 ? args.pop() : function() {};
      context.loading = true;
      request = new bindable.Object(context);
      onComplete = function(err, result) {
        request.set("loading", false);
        request.set("error", err);
        if (!err) {
          request.set("result", result != null ? result : true);
        }
        return next.apply(null, arguments);
      };
      args.push(onComplete);
      if (listener = this._listeners[command]) {
        callbacks = listener.pre.concat(listener.callback).concat(listener.post);
        step.call(request, args, callbacks);
      } else {
        onComplete(comerr.notFound("command '" + command + "' not found."));
      }
      return request;
    };

    /*
    */


    Mediator.prototype.test = function(command) {
      return /object|string/.test(type(command));
    };

    /*
    */


    Mediator.prototype.create = function(command) {
      var commands, fns, self, t, _fn,
        _this = this;

      if ((t = type(command)) === "string") {
        return function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.execute.apply(_this, [command, _this].concat(args));
        };
      } else {
        commands = command;
        fns = [];
        self = this;
        _fn = function(command) {
          var context,
            _this = this;

          context = commands[command];
          return fns.push(function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return self.execute.apply(self, [command, context].concat(args));
          });
        };
        for (command in commands) {
          _fn(command);
        }
        return function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return step(args, fns, args.concat().pop());
        };
      }
    };

    return Mediator;

  })();

  module.exports = function(funwrap) {
    return new Mediator(funwrap);
  };

}).call(this);
